#!/bin/bash

# DevEnv, install my own Dev Environment
# Copyright (C) 2025  #bercianor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -eo pipefail
set -u

SCRIPT_DIR="$(
    cd -- "$(dirname "$0")" >/dev/null 2>&1 || exit
    pwd -P
)"
if [[ ${SCRIPT_DIR} != *DevEnv ]]; then
    SCRIPT_DIR="$HOME/.DevEnv"
fi
PERSONAL_CONFIG_DIR="${SCRIPT_DIR}/personal_config"

# Logging function
log() {
    local level="$1"
    shift
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $*"
}

# Error handler
error_handler() {
    local line_number=$1
    log "ERROR" "Script failed at line $line_number"
    exit 1
}

trap 'error_handler ${LINENO}' ERR

# Utility function for backup and linking
backup_and_link() {
    local source=$1
    local target=$2
    local is_directory=${3:-"false"} # "true" if it's a directory, "false" by default

    # Ensures the directory where the symlink will be created exists
    mkdir -p "$(dirname "$source")"

    # Ensures the target directory for the real file exists
    mkdir -p "$(dirname "$target")"

    # Checks if source is a symlink and points to target
    if [ -L "$source" ] && [ "$(readlink "$source")" = "$target" ]; then
        log "INFO" "Symlink for $source already exists and points to $target. Skipping."
        return 0
    fi

    # If source exists and is not the correct symlink, moves it to target
    if [ -e "$source" ]; then
        log "INFO" "Moving $source to $target"
        mv "$source" "$target"
    else # If source DOES NOT exist, creates the target based on type and then the symlink
        log "INFO" "$source does not exist. Creating target and symlink."
        if [ "$is_directory" = "true" ]; then
            log "INFO" "Creating target as directory: $target"
            mkdir -p "$target"
        else
            log "INFO" "Creating target as file: $target"
            touch "$target"
        fi
    fi

    # Creates symlink from target to source
    log "INFO" "Creating symlink from $target to $source"
    ln -sf "$target" "$source"
}

# Main
main() {
    # GitConfig
    log "INFO" "Backing up personal GitConfig"
    GIT_DIR="${PERSONAL_CONFIG_DIR}/Git"
    backup_and_link "$HOME/.gitconfig" "${GIT_DIR}/gitconfig"
    backup_and_link "$HOME/.gitignore_global" "${GIT_DIR}/gitignore_global"

    # Ssh
    log "INFO" "Backing up personal Ssh"
    SSH_DIR="${PERSONAL_CONFIG_DIR}/Ssh"
    backup_and_link "$HOME/.ssh/config" "${SSH_DIR}/config"
    # backup_and_link "$HOME/.ssh/id_ed25519" "${SSH_DIR}/id_ed25519"
    # backup_and_link "$HOME/.ssh/id_ed25519.pub" "${SSH_DIR}/id_ed25519.pub"

    # Goose
    log "INFO" "Backing up personal Goose"
    GOOSE_DIR="${PERSONAL_CONFIG_DIR}/Goose"
    backup_and_link "$HOME/.config/goose/config.yaml" "${GOOSE_DIR}/config.yaml"
    backup_and_link "$HOME/.config/goose/memory" "${GOOSE_DIR}/memory" "true"

    # MCP Hub
    log "INFO" "Backing up personal MCP Hub"
    MCPHUB_DIR="${PERSONAL_CONFIG_DIR}/MCPhub"
    backup_and_link "$HOME/.config/mcphub/servers.json" "${MCPHUB_DIR}/servers.json"

    # Zsh alias and extra dir
    log "INFO" "Backing up zsh alias and extra config"
    ZSH_DIR="${PERSONAL_CONFIG_DIR}/Zsh"
    backup_and_link "$HOME/.zsh_alias" "${ZSH_DIR}/zsh_alias"
    backup_and_link "$HOME/.zsh.d" "${ZSH_DIR}/zsh.d" "true"

    # WezTerm extra config modules
    log "INFO" "Backing up WezTerm extra config modules"
    WEZTERM_DIR="${PERSONAL_CONFIG_DIR}/WezTerm"
    backup_and_link "$HOME/.config/wezterm/background.lua" "${WEZTERM_DIR}/background.lua"

    # FastFetch
    log "INFO" "Backing up Fastfetch"
    FASTFETCH_DIR="${PERSONAL_CONFIG_DIR}/FastFetch"
    backup_and_link "$HOME/.config/fastfetch/config.jsonc" "${FASTFETCH_DIR}/config.jsonc"

    # NVim
    log "INFO" "Backing up NVim Extra configs"
    NVIM_DIR="${PERSONAL_CONFIG_DIR}/NVim"
    backup_and_link "$HOME/.config/nvim/lazyvim.json" "${NVIM_DIR}/lazyvim.json"

    log "INFO" "Personal configs backup completed."
}

main "$@"
