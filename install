#!/bin/bash

# DevEnv, install my own Dev Environment
# Copyright (C) 2025  #bercianor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -eo pipefail
set -u

SCRIPT_DIR="$(
    cd -- "$(dirname "$0")" >/dev/null 2>&1 || exit
    pwd -P
)"
if [[ ${SCRIPT_DIR} != *DevEnv ]]; then
    SCRIPT_DIR="$HOME/.DevEnv"
fi
BACKUP_DIR="${SCRIPT_DIR}/.backup"
SILENT_MODE="${SILENT:-false}"

# Logging function
log() {
    local level="$1"
    shift
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $*"
}

# Error handler
error_handler() {
    local line_number=$1
    log "ERROR" "Script failed at line $line_number"
    exit 1
}

trap 'error_handler ${LINENO}' ERR

# Check dependencies
check_dependencies() {
    local deps=("curl" "git" "sudo" "unzip")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            log "ERROR" "Required dependency not found: $dep"
            exit 1
        fi
    done
}

# Install component function
install_component() {
    local component=$1
    local dir="${SCRIPT_DIR}/${component}"

    if [ -f "${dir}/installed" ]; then
        log "INFO" "${component} already installed"
        return 0
    fi

    if [[ "$SILENT_MODE" == "false" ]]; then
        read -p "Install ${component}? (Y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            return 0
        fi
    fi

    log "INFO" "Installing ${component}..."
    local install_function="install_${component,,}"
    if declare -F "$install_function" >/dev/null; then
        $install_function
        touch "${dir}/installed"
    else
        log "ERROR" "Installation function for ${component} not found"
        return 1
    fi
}

# Utility function for backup and linking
backup_and_link() {
    local source=$1
    local target=$2

    if [ -e "$source" ]; then
        # Check if the source is a symbolic link and its target is already in BACKUP_DIR
        if [ -L "$source" ] && [[ "$(readlink "$source")" == "${BACKUP_DIR}/"* ]]; then
            log "INFO" "Skipping backup for '$source' as it's already a symlink to a backup."
        else
            mv "$source" "${BACKUP_DIR}/$(basename "$source")"
        fi
    fi
    mkdir -p "$(dirname "$source")"
    ln -sf "$target" "$source"
}

# Component installation functions

WEZTERM_DIR="${SCRIPT_DIR}/WezTerm"
install_wezterm() {
    brew tap wez/wezterm-linuxbrew
    brew install wezterm
    backup_and_link "$HOME/.config/wezterm/wezterm.lua" "${WEZTERM_DIR}/wezterm.lua"
    backup_and_link "$HOME/.local/share/applications/wezterm.desktop" "${WEZTERM_DIR}/wezterm.desktop"
}

ZSH_DIR="${SCRIPT_DIR}/Zsh"
install_zsh() {
    brew install zsh carapace zoxide atuin fzf bat lazygit
    brew install zsh-autosuggestions zsh-syntax-highlighting zsh-autocomplete
    mkdir -p "$HOME/.cache/carapace"
    backup_and_link "$HOME/.zshrc" "${ZSH_DIR}/zshrc"
    mv "$HOME/.oh-my-zsh" "${BACKUP_DIR}/.oh-my-zsh"
    git clone https://github.com/ohmyzsh/ohmyzsh.git "$HOME/.oh-my-zsh"
    brew install powerlevel10k
    backup_and_link "$HOME/.p10k.zsh" "${ZSH_DIR}/p10k.zsh"
    sudo chsh -s "$(which zsh)"
    if [ "$SHELL" != "$(which zsh)" ]; then
        log "WARNING" "Unable to change default shell to Zsh. Please run 'chsh -s $(which zsh)' manually"
    fi
}

TMUX_DIR="${SCRIPT_DIR}/TMux"
install_tmux() {
    brew install tmux
    mv "$HOME/.tmux" "${BACKUP_DIR}/.tmux"
    git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
    backup_and_link "$HOME/.tmux.conf" "${TMUX_DIR}/tmux.conf"
    tmux new-session -d -s plugin-installation "source $HOME/.tmux.conf; tmux run-shell $HOME/.tmux/plugins/tpm/bin/install_plugins"
    tmux kill-session -t plugin-installation
}

NVIM_DIR="${SCRIPT_DIR}/NVim"
install_lazyvim() {
    brew install nvim node npm gcc fzf fd ripgrep coreutils bat lazygit
    backup_and_link "$HOME/.config/nvim" "${NVIM_DIR}/nvim"
}

install_goose() {
    brew install block-goose-cli
    log "INFO" "Run Goose to configure your credentials"
}

# Main
main() {
    check_dependencies

    # Setup repository
    if [ -d "${SCRIPT_DIR}/.git" ]; then
        # Update Github Repo
        log "INFO" "Updating DevEnv repository..."
        git -C "${SCRIPT_DIR}" fetch --all && git -C "${SCRIPT_DIR}" checkout master && git -C "${SCRIPT_DIR}" merge --ff-only origin/master
    else
        # Clone Github Repo
        log "INFO" "Cloning DevEnv repository..."
        git clone https://github.com/bercianor/DevEnv "${SCRIPT_DIR}/"
    fi

    mkdir -p "${BACKUP_DIR}"

    # Install Homebrew if needed
    if ! brew --version &>/dev/null; then
        log "INFO" "Homebrew not found. Installing..."
        # Esenciales (acceso root)
        sudo apt update
        sudo apt install -y build-essential curl file git xclip

        # Rust y Brew
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        # shellcheck source=/dev/null
        . "${HOME}/.cargo/env"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi

    # Install fonts
    log "INFO" "Installing fonts..."
    mkdir -p "$HOME/.local/share/fonts"
    curl -fsSL -o "$HOME/.local/share/fonts/fonts.zip" https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/FiraCode.zip &&
        unzip -o "$HOME/.local/share/fonts/fonts.zip" -d "$HOME/.local/share/fonts/" &&
        rm "$HOME/.local/share/fonts/fonts.zip" # Clean up zip file
    fc-cache -fv &>/dev/null

    # Install components
    for component in WezTerm Zsh TMux LazyVim Goose; do
        install_component "$component"
    done

    # Update installed Homebrew packages
    log "INFO" "Updating Homebrew packages..."
    brew update
    brew upgrade
    log "INFO" "Homebrew packages updated."

    log "INFO" "Installation completed successfully"
}

main "$@"
